# "If you donâ€™t want Google's repository, do
# `sudo touch /etc/default/google-chrome` before installing the package."
#
- name: RedHat - Disable creation of "google-chrome.repo" by package scripts
  copy:
    dest: /etc/default/google-chrome
    content: ''

# This file deliberately contains no configuration.
# The real repo is installed as "local-google-chrome.repo",
# partly for continuity with previous versions of this role.
#
# The "empty" file avoids google-chrome.repo being created by
# fedora-workstation-repositories, potentially overriding our config.
# /etc/cron.daily/google-chrome will not try to "fix" this file, since
# it only contains comments.  (It interprets this as being disabled).
#
- name: RedHat - Create empty "google-chrome.repo"
  template:
    src: google-chrome-disabled.repo.j2
    dest: /etc/yum.repos.d/google-chrome.repo

- name: Simulate install of Google Chrome
  package:
    name: google-chrome-stable
    state: present
  check_mode: yes
  ignore_errors: yes
  register: simulate_google_chrome

# For the initial install only, we can make sure dnf doesn't accept new
# gpgkeys authenticated by *any* of the Web's certificate authorities.

- name: RedHat - Create "local-google-chrome.repo" for installation
  template:
    src: google-chrome-localgpg.repo.j2
    dest: /etc/yum.repos.d/local-google-chrome.repo
  when: simulate_google_chrome.failed or
        simulate_google_chrome.changed

- name: RedHat - Install Google Chrome
  package:
    name: google-chrome-stable
    state: present


- name: RedHat - Create "local-google-chrome.repo" for updates
  template:
    src: google-chrome-autogpg.repo.j2
    dest: /etc/yum.repos.d/local-google-chrome.repo
  register: repo

# This test may be slow, only bother when changed.
# (In which case, the next use of dnf would probably have had to do this anyway).

- name: RedHat - Test "yum check-update"
  when: repo.changed
  command: 'yum --disablerepo="*" --enablerepo=local-google-chrome check-update'
  register: yum_check_update
  # exit status is 0 on success, 100 if updates available (otherwise 100)
  failed_when: yum_check_update.rc not in [0, 100]
  args:
    warn: no  # can't use ansible yum module, it does not implement this

# Consistency check for existing installs.  Have Google done something
# "unexpected" that has left a stale, presumably insecure package?

- name: RedHat - Test package is available in repo (test requires dnf)
  shell: |
    dnf --disablerepo="*" --enablerepo=local-google-chrome \
        repoquery google-chrome-stable \
    | grep google-chrome-stable
  args:
    warn: no  # can't use ansible dnf module, it does not implement this
  check_mode: no
  changed_when: False
  when: ansible_pkg_mgr == 'dnf'
