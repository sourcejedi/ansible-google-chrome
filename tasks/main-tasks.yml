# By automating installs with an ansible role,
# you don't see the normal click-through from the website.
#
# Fedora are currently providing a similar install method.
# So I don't expect to get any calls from Google lawyers :).

- name: LEGAL NOTICE - Google and Google Chrome Terms of Service apply
  debug:
    msg: Please see https://www.google.com/chrome/ or https://www.google.com/intl/en/chrome/terms/
  delegate_to: 127.0.0.1
  run_once: yes

# We install signing keys as per https://www.google.com/linuxrepositories/
#
# Note, this page says to create /etc/apt/trusted.gpg.d/google.gpg.
# /etc/cron.daily/google-chrome will end up creating google-chrome.gpg
# with different binary contents.  The duplication does not cause any
# errors, and it means the ansible role is not fighting with cron.
#
# Download locally.  Note get_url in check_mode would always show
# "changed" (tested: ansible 2.9.10).  So I prefer to download locally,
# even in check mode.  I think this is fine; worst case is it could
# look a bit suprising if you run check mode twice in a row.
#
- name: Fetch the current Google signing sub-keys
  get_url:
    url: https://dl.google.com/linux/linux_signing_key.pub
    dest: "{{ role_path }}/files/linux_signing_key.pub"
    force: yes
  delegate_to: 127.0.0.1
  run_once: yes
  check_mode: no

# Ansible says "upgrade to latest" is not considered best practice.
# However, it might be useful here to remediate a system with an
# out-of-date key.  This problem occurs when a system has been left
# without updating for too long.  For some reason, running the
# google-chrome cron job does not fix it - it never downloads a new
# key.
#
- name: Copy Google signing keys
  copy:
    src: '{{ item }}'
    dest: /ansible-managed/google-chrome/
  with_items:
    - linux_signing_key.pub
    - key_fingerprints.txt
  register: public_key

- name: Copy script for checking master key fingerprints
  copy:
    src: '{{ item }}'
    dest: /ansible-managed/google-chrome/

    # Ansible copy module does not preserve executable bit, unlike `cp`.
    mode: a+x
  with_items:
    - keyfile_to_fingerprints.sh

# The script requires GPG.
# GPG also seemed to be needed for `apt-key add`.

# Note: gnupg2 on ubuntu22.04 (and presumably debian) is now "a dummy
# transitional package that provides symlinks from gpg2 to gpg".
# Our script runs "gpg"... it ain't broke (yet).

- name: Install GPG for checking key fingerprints
  package:
    name: gnupg2
    state: present

# This role adds keys with specific fingerprints.
# (This is a one-off check only.  See README)

- name: Our key file matches our list of fingerprints
  shell: |
    ./keyfile_to_fingerprints.sh linux_signing_key.pub |
    diff -u key_fingerprints.txt /dev/stdin
  args:
    chdir: /ansible-managed/google-chrome/
  changed_when: False
  check_mode: False

- name: Supported OS - must use apt or dnf (or possibly yum)
  assert:
    that: ansible_pkg_mgr in ['apt', 'dnf', 'yum']
    msg: >
      This role only supports an OS based on "Debian" or "RedHat".
      See also "ansible -m setup ... | grep ansible_os_family".

- import_tasks: setup-apt-source.yml
  when: ansible_pkg_mgr == 'apt'

- import_tasks: setup-yum-repo.yml
  when: ansible_pkg_mgr in ['yum', 'dnf']
